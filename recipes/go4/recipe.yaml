context:
  name: Go4
  version: '6.4.1'

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://github.com/gsi-ee/go4//releases/download/${{ version }}/go4-${{ version }}.tar.gz
  sha256: d4c4409b4a86e8686ac19a040824fc37f8ad9bdeef27545cb405b777025e12ee

build:
  # If the installation is complex, or different between Unix and Windows, use separate build.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  skip:
    - win
    - osx
  script:
    - if: unix
      then:
      - "${RECIPE_DIR}/build.sh"
      - "${RECIPE_DIR}/clean_up.sh"
  number: 0

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compiler names include 'c', 'cxx' and 'fortran', among others.
    - ${{ compiler('c') }}
    - ${{ stdlib('c') }}  # If you need any compiler, add the C standard library ("stdlib") too
    - ${{ compiler("cxx") }}
    - cmake
    - make
    - libgl-devel
  host:
    - root
    - qt
    - hdf5
    - python
    - libgl-devel
  run:
    - root
    - qt
    - hdf5
    - python
    - libgl-devel

tests:
  - package_contents:
      # checks for the existence of files inside $PREFIX or %PREFIX%
      # or, checks that there is at least one file matching the specified `glob`
      # pattern inside the prefix
      files:

      # checks for the existence of `mamba/api/__init__.py` inside of the
      # Python site-packages directory (note: also see Python import checks)
      site_packages:

      # looks in $PREFIX/bin/mamba for unix and %PREFIX%\Library\bin\mamba.exe on Windows
      # note: also check the `commands` and execute something like `mamba --help` to make
      # sure things work fine
      bin:
      - go4
      - go4analysis

      # searches for `$PREFIX/lib/libmamba.so` or `$PREFIX/lib/libmamba.dylib` on Linux or macOS,
      # on Windows for %PREFIX%\Library\lib\mamba.dll & %PREFIX%\Library\bin\mamba.bin
      lib:

      # searches for `$PREFIX/include/libmamba/mamba.hpp` on unix, and
      # on Windows for `%PREFIX%\Library\include\libmamba\mamba.hpp`
      include:
  - script:
      # commands to run to test the package. If any of the commands
      # returns with an error code, the test is considered failed.
      - ./run_go4_examples.sh
    files:
      # Extra files to be copied to the test directory from the "work directory"
      source:
        - Go4ExampleSimple/
        - Go4ExampleUserSource/
      recipe:
        - run_go4_examples.sh
    requirements:
      run:
      - ${{ compiler("c") }}
      - ${{ compiler("cxx") }}
      - cmake
      - make

about:
  homepage: https://www.gsi.de/en/work/research/experiment_electronics/data_processing/data_analysis/the_go4_home_page
  summary: |
    The object-oriented system Go4 (GSI Object Oriented On-line Off-line system)
    is based on ROOT (R. Brun et al.) with the specific requirements of the low
    and medium energy nuclear and atomic physics experiments implemented as extensions.
  description: |
    Go4 separates analysis and GUI in two tasks which could run on different nodes.
    Communication is done through threads and sockets. The GUI is built with the
    Qt widget library using the Qt designer. Qt and ROOT are interfaced by QtROOT.
    Full ROOT functionality including menus and graphics is available without modifications.
    The Go4 analysis framework provides the syntax to organize the analysis in steps
    which can be controlled from the GUI. Each step has its own IO and processing classes. 
    The Go4 event classes can be used to construct at runtime complex (composite) events which
    are stored by Go4 in trees and branches without explicit programming. The Go4 GUI includes
    a browser and tree viewer which can be used without analysis to process standard ROOT files.
    The tree viewer resolves arbitrary hierarchy levels of composite event trees.
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: GPL-3.0-or-later
  # It is required to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # Please also note that some projects have multiple license files which all need to be added using a valid yaml list.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE
  # The documentation and repository URLs are optional.
  documentation: https://www.gsi.de/en/work/research/experiment_electronics/data_processing/data_analysis/the_go4_home_page/documentation
  repository: https://github.com/gsi-ee/go4

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - HLinde
